{
	"info": {
		"_postman_id": "a7f95c86-21b9-4bb4-8b23-807f53069def",
		"name": "TEST_Postman_AchadosPerdidos",
		"description": "Api Documentation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login ADMIN / USUÁRIO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (responseCode.code >= 200 && responseCode.code < 300) {\r",
									"    var json = JSON.parse(responseBody);\r",
									"    postman.setEnvironmentVariable('token', json.access_token);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{client-secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{client-id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "User by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"body \", function(){\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.firstName).to.eql(\"Pedro\");\r",
									"    pm.expect(responseJson.lastName).to.eql(\"Almeida\");\r",
									"    pm.expect(responseJson.email).to.eql(\"pedro@gmail.com\");\r",
									"    pm.expect(responseJson.roles[0].authority).to.eql(\"ROLE_OPERATOR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "User < error, New user Email duplicado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"pedro@gmail.com\",\r\n  \"firstName\": \"Fábio\",\r\n  \"lastName\": \"Castro\",\r\n  \"password\": \"123silvia321\",\r\n  \"roles\": [\r\n    {      \r\n      \"id\": 1\r\n    },\r\n    {      \r\n      \"id\": 2\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users < paginação com respectivas permissões",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"body Id:1\", function(){\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.content [0].firstName).to.eql(\"Pedro\");\r",
									"    pm.expect(responseJson.content [0].lastName).to.eql(\"Almeida\");\r",
									"    pm.expect(responseJson.content [0].email).to.eql(\"pedro@gmail.com\");\r",
									"    pm.expect(responseJson.content[0].roles[0].authority).to.eql(\"ROLE_OPERATOR\");\r",
									"})\r",
									"\r",
									"pm.test(\"body\", function(){\r",
									"    var responseJson = pm.response.json();    \r",
									"    pm.expect(responseJson.content[1].roles[0].authority).to.be.oneOf([\"ROLE_OPERATOR\", \"ROLE_ADMIN\"]);\r",
									"    pm.expect(responseJson.content[1].roles[1].authority).to.be.oneOf([\"ROLE_OPERATOR\", \"ROLE_ADMIN\"]);\r",
									"})\r",
									"\r",
									"pm.test(\"Total de objetos são 02\", function(){\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.content).length(2);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=0&size=12&sort=firstName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "12"
								},
								{
									"key": "sort",
									"value": "firstName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New user Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const suffix = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r",
									"pm.collectionVariables.set(\"emailRandom\", \"Maria_Random\" + \"_\" + suffix + \"@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{emailRandom}}\",\r\n  \"firstName\": \"Silvia\",\r\n  \"lastName\": \"Camilla\",\r\n  \"password\": \"123silvia321\",\r\n  \"roles\": [\r\n    {      \r\n      \"id\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"body\", function(){\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.firstName).to.eql(\"Silvia\");\r",
									"    pm.expect(responseJson.lastName).to.eql(\"Camilla\");\r",
									"    pm.expect(responseJson.email).to.eql(\"alternativosilvia@email.com\");\r",
									"    pm.expect(responseJson.roles[0].authority).to.be.oneOf([\"ROLE_OPERATOR\", \"ROLE_ADMIN\"]);\r",
									"    pm.expect(responseJson.roles[1].authority).to.be.oneOf([\"ROLE_OPERATOR\", \"ROLE_ADMIN\"]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"alternativosilvia@email.com\",\r\n  \"firstName\": \"Silvia\",\r\n  \"lastName\": \"Camilla\",\r\n  \"password\": \"123silvia321\",\r\n  \"roles\": [\r\n    {      \r\n      \"id\": 1\r\n    },\r\n    {      \r\n      \"id\": 2\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user  /123 < error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user /1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Se body é null\", function(){\r",
									"    pm.response.to.not.have.header();\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "User < error, Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"alternativosilvia@email.com\",\r\n  \"firstName\": \"Silvia\",\r\n  \"lastName\": \"\",\r\n  \"password\": \"123silvia321\",\r\n  \"roles\": [\r\n    {      \r\n      \"id\": 1\r\n    },\r\n    {      \r\n      \"id\": 2\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users < error, paginação",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=0&size=12&sort=firstNames",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "12"
								},
								{
									"key": "sort",
									"value": "firstNames"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New user Role/Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const suffix = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r",
									"pm.collectionVariables.set(\"emailRandom\", \"Maria_Random\" + \"_\" + suffix + \"@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{emailRandom}}\",\r\n  \"firstName\": \"Silvia\",\r\n  \"lastName\": \"Camilla\",\r\n  \"password\": \"123silvia321\",\r\n  \"roles\": [\r\n    {      \r\n      \"id\": 1\r\n    },\r\n    {      \r\n      \"id\": 2\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "New user Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const suffix = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r",
									"pm.collectionVariables.set(\"emailRandom\", \"Maria_Random\" + \"_\" + suffix + \"@gmail.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{emailRandom}}\",\r\n  \"firstName\": \"Silvia\",\r\n  \"lastName\": \"Camilla\",\r\n  \"password\": \"123silvia321\",\r\n  \"roles\": [\r\n    {      \r\n      \"id\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ObjetosPerdidos",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "Objeto por Bairro, trecho de nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"body Id:7\", function(){\r",
											" var responseJson = pm.response.json();\r",
											" pm.expect(responseJson [1].descricaoDoObjeto).to.eql(\"Documento RG 39.142.008-2\");\r",
											" pm.expect(responseJson[1].bairroOndeObjetoFoiEncontrado).to.eql(\"Brooklin\");\r",
											"}) \r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe objeto Fone de ouvido, preto\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Fone de ouvido, preto\");\r",
											"});\r",
											"\r",
											"pm.test(\"Pedido aleatório deve sim ter nome\", function(){\r",
											"pm.expect(_.sample(pm.response.json()).descricaoDoObjeto).to.not.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/broo/bairroOndeObjetoFoiEncontrado",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"broo",
										"bairroOndeObjetoFoiEncontrado"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Objeto por partes do nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"body Id:6\", function(){\r",
											" var responseJson = pm.response.json();\r",
											" pm.expect(responseJson [2].descricaoDoObjeto).to.eql(\"Camisa Lacoste Azulzinha\");\r",
											" pm.expect(responseJson[2].bairroOndeObjetoFoiEncontrado).to.eql(\"Vila Uberabinha\");\r",
											"}) \r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe objeto Boné Trucker Azulzinho\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Boné Trucker Azulzinho\");\r",
											"});\r",
											"\r",
											"pm.test(\"Pedido aleatório deve sim ter nome\", function(){\r",
											"pm.expect(_.sample(pm.response.json()).descricaoDoObjeto).to.not.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/azul/nameIgnoreCase",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"azul",
										"nameIgnoreCase"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Objeto por partes do nome < error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/aana/nameIgnoreCase",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"aana",
										"nameIgnoreCase"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Objeto por Bairro que não existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/Bonanca/bairroOndeObjetoFoiEncontrado",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"Bonanca",
										"bairroOndeObjetoFoiEncontrado"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Objeto findAll, name Asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"body Id:12\", function(){\r",
											" var responseJson = pm.response.json();\r",
											" pm.expect(responseJson [9].descricaoDoObjeto).to.eql(\"Camiseta Azulona\");\r",
											" pm.expect(responseJson[9].bairroOndeObjetoFoiEncontrado).to.eql(\"Moema\");\r",
											" pm.expect(responseJson[9].status).to.eql(\"ACHADO\");\r",
											"}) \r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe objeto Chuteira de futebol de campo, cadarço branco\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Chuteira de futebol de campo, cadarço branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"Pedido aleatório deve sim ter nome\", function(){\r",
											"pm.expect(_.sample(pm.response.json()).descricaoDoObjeto).to.not.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/nomeDoObjetoAsc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"nomeDoObjetoAsc"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Objeto findAll, somente objetos perdidos e name Asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"body Id:21\", function(){\r",
											" var responseJson = pm.response.json();\r",
											" pm.expect(responseJson [12].descricaoDoObjeto).to.eql(\"Documento CPF 439.132.108-06 \");\r",
											" pm.expect(responseJson[12].bairroOndeObjetoFoiEncontrado).to.eql(\"Vila Clementino\");\r",
											" pm.expect(responseJson[12].status).to.eql(\"PERDIDO\");\r",
											"}) \r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe objeto Camisa Lacoste Azulzinha\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Camisa Lacoste Azulzinha\");\r",
											"});\r",
											"\r",
											"pm.test(\"Se todos os pedidos possuem produto\", function(){\r",
											"_.forEach(pm.response.json(), function(orders){\r",
											"pm.expect(orders.products).to.not.be.null;\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Pedido aleatório deve sim ter nome\", function(){\r",
											"pm.expect(_.sample(pm.response.json()).descricaoDoObjeto).to.not.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/somenteObjetosPerdidosnameAsc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"somenteObjetosPerdidosnameAsc"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Product by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"body \", function(){\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.descricaoDoObjeto).to.eql(\"Viseira branca\");\r",
											"    pm.expect(responseJson.bairroOndeObjetoFoiEncontrado).to.eql(\"Brooklin\");\r",
											"    pm.expect(responseJson.status).to.eql(\"PERDIDO\");    \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Objetos, paginação findAll, sem limitação de datas min e max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Id 7 \", function(){\r",
											"    var responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.content [1]. descricaoDoObjeto).to.eql(\"Documento RG 39.142.008-2\");\r",
											"    pm.expect(responseJson.content [1].bairroOndeObjetoFoiEncontrado).to.eql(\"Brooklin\");\r",
											"    pm.expect(responseJson.content [1].status).to.eql(\"PERDIDO\");    \r",
											"});\r",
											"\r",
											"pm.test(\"Se existe objeto Chave de automóvel Toyota, chaveiro preto\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Chave de automóvel Toyota, chaveiro preto\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/paginacaoComSeisParametros?direction=ASC&linesPerPage=0&min=&max=&orderBy=moment&page=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"paginacaoComSeisParametros"
									],
									"query": [
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "linesPerPage",
											"value": "0"
										},
										{
											"key": "min",
											"value": ""
										},
										{
											"key": "max",
											"value": ""
										},
										{
											"key": "orderBy",
											"value": "moment"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Objetos, paginação findAll, com limitação de datas min e max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"body do Id:8\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.content [1].descricaoDoObjeto).to.eql(\"Bolsa branca\");\r",
											"pm.expect(responseJson.content [1].bairroOndeObjetoFoiEncontrado).to.eql(\"Vila Olímpia\");\r",
											"pm.expect(responseJson.content [1].status).to.eql(\"PERDIDO\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Total de objetos são 10\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.content).length(10);\r",
											"})\r",
											"\r",
											"pm.test(\"Relógio analógico, detalhes em branco\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Relógio analógico, detalhes em branco\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/paginacaoComSeisParametros?direction=ASC&linesPerPage=0&min=2021-01-07T10:00:00Z&max=2021-01-15T13:00:00Z&orderBy=moment&page=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"paginacaoComSeisParametros"
									],
									"query": [
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "linesPerPage",
											"value": "0"
										},
										{
											"key": "min",
											"value": "2021-01-07T10:00:00Z"
										},
										{
											"key": "max",
											"value": "2021-01-15T13:00:00Z"
										},
										{
											"key": "orderBy",
											"value": "moment"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Objeto 'id 13'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objetos/13",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objetos",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "Objeto 'Id 13' < error, não encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/objetos/13",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objetos",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "Objeto Id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"body \", function(){\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.descricaoDoObjeto).to.eql(\"Aparador de Pelos, Wahl, Mini Groomsman 3 em 1, 5608-548, Preto\");\r",
									"    pm.expect(responseJson.bairroOndeObjetoFoiEncontrado).to.eql(\"Vila Uberabinha\");    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bairroOndeObjetoFoiEncontrado\": \"Vila Uberabinha\",  \r\n  \"descricaoDoObjeto\": \"Aparador de Pelos, Wahl, Mini Groomsman 3 em 1, 5608-548, Preto\"  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/objetos/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objetos",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Objeto perdido Id não existe <error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bairroOndeObjetoFoiEncontrado\": \"Brooklin\",  \r\n  \"name\": \"Violão Elétrico Tagima Memphis AC-60 Nylon Natural\"  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/objetos/350",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objetos",
								"350"
							]
						}
					},
					"response": []
				},
				{
					"name": "Objeto perdido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"body \", function(){\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id).to.eql(29); \r",
									"    pm.expect(responseJson.descricaoDoObjeto).to.eql(\"Coleção de lápis de cor\");   \r",
									"    pm.expect(responseJson.bairroOndeObjetoFoiEncontrado).to.eql(\"Vila Clementino\");  \r",
									"    pm.expect(responseJson.status).to.eql(\"PERDIDO\");   \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bairroOndeObjetoFoiEncontrado\": \"Vila Clementino\",  \r\n  \"descricaoDoObjeto\": \"Coleção de lápis de cor\"  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/objetos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"objetos"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CadastroViaCep",
			"item": [
				{
					"name": "CadastroViaCep; cep=79005-090",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"body\", function(){\r",
									"var responseJson = pm.response.json();\r",
									"pm.expect(responseJson.id).to.eql(11);\r",
									"pm.expect(responseJson.nome).to.eql(\"Cecília Teresinha Malu Campos\");\r",
									"pm.expect(responseJson.email).to.eql(\"cecilia-91@pichler.com.br\");\r",
									"pm.expect(responseJson.cpf).to.eql(\"675.111.172-01\");\r",
									"pm.expect(responseJson.dataDeNascimento).to.eql(\"05-08-1987\");\r",
									"pm.expect(responseJson.logradouro).to.eql(\"Rua Olavo Bilac\");\r",
									"pm.expect(responseJson.numero).to.eql(267);\r",
									"pm.expect(responseJson.complemento).to.eql(\"Apt 1802\");\r",
									"pm.expect(responseJson.bairro).to.equal(\"Vila Carvalho\");\r",
									"pm.expect(responseJson.localidade).to.equal(\"Campo Grande\");\r",
									"pm.expect(responseJson.uf).to.eql(\"MS\");\r",
									"pm.expect(responseJson.cep).to.eql(\"79005-090\");\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Content type application/json\", function(){\r",
									"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Retorna um body\", function(){\r",
									"pm.expect(pm.response.json()).to.not.be.undefined;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Cecília Teresinha Malu Campos\",\r\n  \"cpf\": \"675.111.172-01\",\r\n  \"dataDeNascimento\": \"05-08-1987\",\r\n  \"email\": \"cecilia-91@pichler.com.br\",\r\n  \"cep\": \"79005-090\",\r\n  \"complemento\": \"Apt 1802\",\r\n  \"numero\": 267\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cadastros",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cadastros"
							]
						}
					},
					"response": []
				},
				{
					"name": "CadastroViaCep; cep=58074-158",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"body\", function(){\r",
									"var responseJson = pm.response.json();\r",
									"pm.expect(responseJson.id).to.eql(12);\r",
									"pm.expect(responseJson.nome).to.eql(\"Cláudio Isaac Bernardes\");\r",
									"pm.expect(responseJson.email).to.eql(\"claudio_bernardes@premierpet.com.br\");\r",
									"pm.expect(responseJson.cpf).to.eql(\"127.882.549-54\");\r",
									"pm.expect(responseJson.dataDeNascimento).to.eql(\"13-12-1977\");\r",
									"pm.expect(responseJson.logradouro).to.eql(\"Rua Penha Emília da Silva\");\r",
									"pm.expect(responseJson.numero).to.eql(250);\r",
									"pm.expect(responseJson.complemento).to.eql(\"Bl 02, Apt 2101\");\r",
									"pm.expect(responseJson.bairro).to.equal(\"José Américo de Almeida\");\r",
									"pm.expect(responseJson.localidade).to.equal(\"João Pessoa\");\r",
									"pm.expect(responseJson.uf).to.eql(\"PB\");\r",
									"pm.expect(responseJson.cep).to.eql(\"58074-158\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content type application/json\", function(){\r",
									"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Retorna um body\", function(){\r",
									"pm.expect(pm.response.json()).to.not.be.undefined;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Cláudio Isaac Bernardes\",\r\n  \"cpf\": \"127.882.549-54\",\r\n  \"dataDeNascimento\": \"13-12-1977\",\r\n  \"email\": \"claudio_bernardes@premierpet.com.br\",\r\n  \"cep\": \"58074-158\",\r\n  \"complemento\": \"Bl 02, Apt 2101\",\r\n  \"numero\": 250\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cadastros",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cadastros"
							]
						}
					},
					"response": []
				},
				{
					"name": "CadastroViaCep; cep=35501-427",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"body\", function(){\r",
									"var responseJson = pm.response.json();\r",
									"pm.expect(responseJson.id).to.eql(13);\r",
									"pm.expect(responseJson.nome).to.eql(\"Nicole Marina Isabela da Costa\");\r",
									"pm.expect(responseJson.email).to.eql(\"nicolemarina-85@kof.com.mx\");\r",
									"pm.expect(responseJson.cpf).to.eql(\"745.510.045-02\");\r",
									"pm.expect(responseJson.dataDeNascimento).to.eql(\"01-10-1948\");\r",
									"pm.expect(responseJson.logradouro).to.eql(\"Rua Waldemira Antunes da Silva\");\r",
									"pm.expect(responseJson.numero).to.eql(1520);\r",
									"pm.expect(responseJson.complemento).to.eql(\"Apt 3002\");\r",
									"pm.expect(responseJson.bairro).to.equal(\"Santo André\");\r",
									"pm.expect(responseJson.localidade).to.equal(\"Divinópolis\");\r",
									"pm.expect(responseJson.uf).to.eql(\"MG\");\r",
									"pm.expect(responseJson.cep).to.eql(\"35501-427\");\r",
									"})\r",
									"\r",
									"pm.test(\"Content type application/json\", function(){\r",
									"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Retorna um body\", function(){\r",
									"pm.expect(pm.response.json()).to.not.be.undefined;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Nicole Marina Isabela da Costa\",\r\n  \"cpf\": \"745.510.045-02\",\r\n  \"dataDeNascimento\": \"01-10-1948\",\r\n  \"email\": \"nicolemarina-85@kof.com.mx\",\r\n  \"cep\": \"35501-427\",\r\n  \"complemento\": \"Apt 3002\",\r\n  \"numero\": 1520\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cadastros",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cadastros"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro por CPF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"body\", function(){\r",
									"var responseJson = pm.response.json();\r",
									"pm.expect(responseJson.id).to.eql(8);\r",
									"pm.expect(responseJson.nome).to.eql(\"Andrea Emanuelly Pereira\");\r",
									"pm.expect(responseJson.email).to.eql(\"aandreapereira@lagencemodelos.com.br\");\r",
									"pm.expect(responseJson.cpf).to.eql(\"902.651.298-85\");\r",
									"pm.expect(responseJson.dataDeNascimento).to.eql(\"12-11-1968\");\r",
									"pm.expect(responseJson.nome).to.eql(\"Andrea Emanuelly Pereira\");\r",
									"pm.expect(responseJson.email).to.eql(\"aandreapereira@lagencemodelos.com.br\");\r",
									"pm.expect(responseJson.dataDeNascimento).to.eql(\"12-11-1968\");\r",
									"pm.expect(responseJson.logradouro).to.equal(\"Rua Bramantino\");\r",
									"pm.expect(responseJson.cep).to.eql(\"04548-030\");\r",
									"})\r",
									"\r",
									"pm.test(\"Retorna um body\", function(){\r",
									"pm.expect(pm.response.json()).to.not.be.undefined;\r",
									"})\r",
									"\r",
									"pm.test(\"Content type application/json\", function(){\r",
									"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Nicole Marina Isabela da Costa\",\r\n  \"cpf\": \"745.510.045-02\",\r\n  \"dataDeNascimento\": \"01-10-1948\",\r\n  \"email\": \"nicolemarina-85@kof.com.mx\",\r\n  \"cep\": \"35501-427\",\r\n  \"complemento\": \"Apt 3002\",\r\n  \"numero\": 1520\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cadastros/902.651.298-85",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cadastros",
								"902.651.298-85"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro por CPF < error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Nicole Marina Isabela da Costa\",\r\n  \"cpf\": \"745.510.045-02\",\r\n  \"dataDeNascimento\": \"01-10-1948\",\r\n  \"email\": \"nicolemarina-85@kof.com.mx\",\r\n  \"cep\": \"35501-427\",\r\n  \"complemento\": \"Apt 3002\",\r\n  \"numero\": 1520\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/cadastros/594.438.448-43",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cadastros",
								"594.438.448-43"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SolicitacaoDePropriedade",
			"item": [
				{
					"name": "Solicitação A, Objetos Id 2, 5",
					"item": [
						{
							"name": "setObjetoAchado, produto Id 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"body\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.id).to.eql(2);\r",
											"pm.expect(responseJson.descricaoDoObjeto).to.eql(\"Aparador de Pelos, Wahl, Mini Groomsman 3 em 1, 5608-548, Preto\");\r",
											"pm.expect(responseJson.bairroOndeObjetoFoiEncontrado).to.eql(\"Vila Uberabinha\");\r",
											"pm.expect(responseJson.status).to.eql(\"ACHADO\");\r",
											"})\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/2/objetoAchado",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"2",
										"objetoAchado"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Created",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "setObjetoAchado, produto Id 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"body\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.id).to.eql(5);\r",
											"pm.expect(responseJson.descricaoDoObjeto).to.eql(\"Documento CPF 439.132.108-06 \");\r",
											"pm.expect(responseJson.bairroOndeObjetoFoiEncontrado).to.eql(\"Vila Clementino\");\r",
											"pm.expect(responseJson.status).to.eql(\"ACHADO\");\r",
											"})\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Se existe Documento CPF 439.132.108-06\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Documento CPF 439.132.108-06\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/5/objetoAchado",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"5",
										"objetoAchado"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Created",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Solicitação A, Objetos Id 2, 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"body\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.id).to.eql(3);\r",
											"pm.expect(responseJson.nome).to.eql(\"Daiane Ana Bernardes\");\r",
											"pm.expect(responseJson.cpf).to.eql(\"277.627.008-97\");\r",
											"pm.expect(responseJson.dataDeNascimento).to.eql(\"04-10-2006\");\r",
											"pm.expect(responseJson.logradouro).to.eql(\"Rua das Fiandeiras\");\r",
											"pm.expect(responseJson.numero).to.eql(470);\r",
											"pm.expect(responseJson.complemento).to.eql(\"Apt 2002\");\r",
											"pm.expect(responseJson.bairro).to.equal(\"Vila Olímpia\");\r",
											"pm.expect(responseJson.localidade).to.equal(\"São Paulo\");\r",
											"pm.expect(responseJson.uf).to.eql(\"SP\");\r",
											"pm.expect(responseJson.cep).to.eql(\"04545-002\");\r",
											"pm.expect(responseJson.objetos [0].descricaoDoObjeto).to.eql(\"Documento CPF 439.132.108-06 \");\r",
											"pm.expect(responseJson.objetos [1].descricaoDoObjeto).to.eql(\"Aparador de Pelos, Wahl, Mini Groomsman 3 em 1, 5608-548, Preto\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"cadastroDoDonoDoObjetoId\": 1,    \n\t\"objetos\": [\n\t\t{     \n\t\t    \"id\": 2    \n\t\t},\n\t\t{     \n\t\t    \"id\": 5    \n\t\t}\n\t]  \n}\t",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade"
									]
								}
							},
							"response": []
						},
						{
							"name": "Objeto 'id 5' < error, objeto já associado a pedido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"5"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Solicitação B, Objetos Id 6, 15, 22 e 21",
					"item": [
						{
							"name": "setObjetoAchado, produto Id 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"body status = ACHADO\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.status).to.eql(\"ACHADO\");\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe objeto Camisa Lacoste Azulzinha\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Camisa Lacoste Azulzinha\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/6/objetoAchado",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"6",
										"objetoAchado"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Created",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "setObjetoAchado, produto Id 15",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"body status = ACHADO\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.status).to.eql(\"ACHADO\");\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe Boné Trucker Azulzinho\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Boné Trucker Azulzinho\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/15/objetoAchado",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"15",
										"objetoAchado"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Created",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "setObjetoAchado, produto Id 22",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"body status = ACHADO\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.status).to.eql(\"ACHADO\");\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe Chave de automóvel Toyota, chaveiro preto\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Chave de automóvel Toyota, chaveiro preto\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/22/objetoAchado",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"22",
										"objetoAchado"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Created",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "setObjetoAchado, produto Id 21",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"body status = ACHADO\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.status).to.eql(\"ACHADO\");\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe Documento CPF 757.499.238-00\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Documento CPF 757.499.238-00\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/21/objetoAchado",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"21",
										"objetoAchado"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Created",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders/:id/delivered",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders",
												":id",
												"delivered"
											],
											"variable": [
												{
													"key": "id",
													"value": "-82829652",
													"description": "(Required) id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Solicitação B, Objetos Id 6, 15, 22 e 21",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"body\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.id).to.eql(4);\r",
											"pm.expect(responseJson.nome).to.eql(\"Bryan Caleb Lima\");\r",
											"pm.expect(responseJson.cpf).to.eql(\"975.359.708-85\");\r",
											"pm.expect(responseJson.dataDeNascimento).to.eql(\"21-02-1942\");\r",
											"pm.expect(responseJson.logradouro).to.eql(\"Travessa Vera Cruz do Oeste\");\r",
											"pm.expect(responseJson.numero).to.eql(5521);\r",
											"pm.expect(responseJson.complemento).to.eql(\"Edf. Ema\");\r",
											"pm.expect(responseJson.bairro).to.equal(\"Vila Uberabinha\");\r",
											"pm.expect(responseJson.localidade).to.equal(\"São Paulo\");\r",
											"pm.expect(responseJson.uf).to.eql(\"SP\");\r",
											"pm.expect(responseJson.cep).to.eql(\"04514-090\");\r",
											"pm.expect(responseJson.objetos [0].descricaoDoObjeto).to.eql(\"Documento CPF 757.499.238-00\");\r",
											"pm.expect(responseJson.objetos [1].descricaoDoObjeto).to.eql(\"Camisa Lacoste Azulzinha\");\r",
											"pm.expect(responseJson.objetos [2].descricaoDoObjeto).to.eql(\"Chave de automóvel Toyota, chaveiro preto\");\r",
											"pm.expect(responseJson.objetos [3].descricaoDoObjeto).to.eql(\"Boné Trucker Azulzinho\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Se existe Documento CPF 757.499.238-00\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Documento CPF 757.499.238-00\");\r",
											"});\r",
											"\r",
											"pm.test(\"Total de produtos são 04\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.objetos).length(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"cadastroDoDonoDoObjetoId\": 3,    \n\t\"objetos\": [\n\t\t{     \n\t\t    \"id\": 6    \n\t\t},\n\t\t{     \n\t\t    \"id\": 15    \n\t\t},\n        {     \n\t\t    \"id\": 22    \n\t\t},\n        {     \n\t\t    \"id\": 21    \n\t\t}\n\t]  \n}\t",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade"
									]
								}
							},
							"response": []
						},
						{
							"name": "Objeto 'id 22' < error, objeto já associado a pedido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/22",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"22"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Solicitação C <error produto 'Id 10' não existe",
					"item": [
						{
							"name": "Objeto 'Id 10'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/objetos/10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"objetos",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Solicitação C <error produto 'Id 10' não existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"cadastroDoDonoDoObjetoId\": 3,    \n\t\"objetos\": [\n\t\t{     \n\t\t    \"id\": 16    \n\t\t},\n\t\t{     \n\t\t    \"id\": 10    \n\t\t},\n        {     \n\t\t    \"id\": 25    \n\t\t},\n        {     \n\t\t    \"id\": 11    \n\t\t}\n\t]  \n}\t",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "Solicitação, page findAll",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Total de objetos são 4\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.content).length(4);\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe objeto Aparador de Pelos, Wahl, Mini Groomsman 3 em 1, 5608-548, Preto\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Aparador de Pelos, Wahl, Mini Groomsman 3 em 1, 5608-548, Preto\");\r",
											"});\r",
											"\r",
											"pm.test(\"Se todos os pedidos possuem produto\", function(){\r",
											"_.forEach(pm.response.json(), function(orders){\r",
											"pm.expect(orders.products).to.not.be.null;\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Pedido aleatório deve sim ter cep\", function(){\r",
											"pm.expect(_.sample(pm.response.json().content).cep).to.not.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade/page?min=&max=&direction=ASC&linesPerPage=0&orderBy=moment&page=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade",
										"page"
									],
									"query": [
										{
											"key": "min",
											"value": ""
										},
										{
											"key": "max",
											"value": ""
										},
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "linesPerPage",
											"value": "0"
										},
										{
											"key": "orderBy",
											"value": "moment"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"orders"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Solicitação, page findAll, sem preenchimento de datas min e max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Total de objetos são 4\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.content).length(4);\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe objeto Aparador de Pelos, Wahl, Mini Groomsman 3 em 1, 5608-548, Preto\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Aparador de Pelos, Wahl, Mini Groomsman 3 em 1, 5608-548, Preto\");\r",
											"});\r",
											"\r",
											"pm.test(\"Se todos os pedidos possuem produto\", function(){\r",
											"_.forEach(pm.response.json(), function(orders){\r",
											"pm.expect(orders.products).to.not.be.null;\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Pedido aleatório deve sim ter cep\", function(){\r",
											"pm.expect(_.sample(pm.response.json().content).cep).to.not.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade/page?min=&max=&direction=ASC&linesPerPage=0&orderBy=moment&page=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade",
										"page"
									],
									"query": [
										{
											"key": "min",
											"value": ""
										},
										{
											"key": "max",
											"value": ""
										},
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "linesPerPage",
											"value": "0"
										},
										{
											"key": "orderBy",
											"value": "moment"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Solicitação, page findAll, com limitação de datas min e max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content type application/json\", function(){\r",
											"pm.response.to.have.header(\"Content-type\", \"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Retorna um body\", function(){\r",
											"pm.expect(pm.response.json()).to.not.be.undefined;\r",
											"})\r",
											"\r",
											"pm.test(\"Total de objetos são 2\", function(){\r",
											"var responseJson = pm.response.json();\r",
											"pm.expect(responseJson.content).length(2);\r",
											"})\r",
											"\r",
											"pm.test(\"Se existe Nome Olivia Sara Cardoso\", function(){\r",
											"console.log(pm.response.text());\r",
											"pm.expect(pm.response.text()).to.includes(\"Olivia Sara Cardoso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Se todos os pedidos possuem produto\", function(){\r",
											"_.forEach(pm.response.json(), function(orders){\r",
											"pm.expect(orders.products).to.not.be.null;\r",
											"});\r",
											"});\r",
											"\r",
											"pm.test(\"Pedido aleatório deve sim ter cep\", function(){\r",
											"pm.expect(_.sample(pm.response.json().content).cep).to.not.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade/page?min=2021-01-01T07:00:00Z&max=2021-01-01T16:00:00Z&direction=ASC&linesPerPage=0&orderBy=moment&page=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade",
										"page"
									],
									"query": [
										{
											"key": "min",
											"value": "2021-01-01T07:00:00Z"
										},
										{
											"key": "max",
											"value": "2021-01-01T16:00:00Z"
										},
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "linesPerPage",
											"value": "0"
										},
										{
											"key": "orderBy",
											"value": "moment"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Solicitação, page findAll < error, data inserida de modo errado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade/page?min=2021-01-01T15:00:00Z&max=2021-01-01T&direction=ASC&linesPerPage=0&orderBy=moment&page=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade",
										"page"
									],
									"query": [
										{
											"key": "min",
											"value": "2021-01-01T15:00:00Z"
										},
										{
											"key": "max",
											"value": "2021-01-01T"
										},
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "linesPerPage",
											"value": "0"
										},
										{
											"key": "orderBy",
											"value": "moment"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Solicitação, page findAll < error, 'orderBy', sintaxe de requisição errada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade/page?min=2021-01-01T15:00:00Z&max=2021-01-01T16:00:00Z&direction=ASC&linesPerPage=0&orderBy=momentZZZ&page=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade",
										"page"
									],
									"query": [
										{
											"key": "min",
											"value": "2021-01-01T15:00:00Z"
										},
										{
											"key": "max",
											"value": "2021-01-01T16:00:00Z"
										},
										{
											"key": "direction",
											"value": "ASC"
										},
										{
											"key": "linesPerPage",
											"value": "0"
										},
										{
											"key": "orderBy",
											"value": "momentZZZ"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Solicitação, page findAll < error, 'direction', sintaxe de requisição errada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/solicitacaoDePropriedade/page?min=2021-01-01T15:00:00Z&max=2021-01-01T16:00:00Z&direction=ASCzzz&linesPerPage=0&orderBy=moment&page=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"solicitacaoDePropriedade",
										"page"
									],
									"query": [
										{
											"key": "min",
											"value": "2021-01-01T15:00:00Z"
										},
										{
											"key": "max",
											"value": "2021-01-01T16:00:00Z"
										},
										{
											"key": "direction",
											"value": "ASCzzz"
										},
										{
											"key": "linesPerPage",
											"value": "0"
										},
										{
											"key": "orderBy",
											"value": "moment"
										},
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/records?direction=DESC&linesPerPage=0&max=incididunt Lorem nisi&min=incididunt Lorem nisi&orderBy=moment&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"records"
											],
											"query": [
												{
													"key": "direction",
													"value": "DESC"
												},
												{
													"key": "linesPerPage",
													"value": "0"
												},
												{
													"key": "max",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "min",
													"value": "incididunt Lorem nisi"
												},
												{
													"key": "orderBy",
													"value": "moment"
												},
												{
													"key": "page",
													"value": "0"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "//localhost:8080/"
		},
		{
			"key": "emailRandom",
			"value": ""
		}
	]
}